
/**
  * @ClassName TagsBuilder
  *            <p>
  *            </p>
  * @Author Yespon Liu(yespon@qq.com)
  * @Date 2018/10/31 13:27
  */
class TagsBuilder() {

  private val tag_mapper = Map("1" -> 1,"7" -> 2, "010010001" -> 3, "010010002" -> 4, "010020001" -> 5,
    "010020002" -> 6, "010020003" -> 7, "010020004" -> 8, "010020005" -> 9, "010020006" -> 10,
    "010020007" -> 11, "010030001" -> 12, "010030002" -> 13, "010030003" -> 14, "010030004" -> 15,
    "010030005" -> 16, "010030006" -> 17, "010030007" -> 18, "010040001" -> 19, "10050001" -> 20,
    "010060001" -> 21, "010060002" -> 22, "020030001" -> 23, "020030002" -> 24, "020030003" -> 25,
    "020030004" -> 26, "020030005" -> 27, "020030006" -> 28, "020030007" -> 29, "020030008" -> 30,
    "020030009" -> 31, "020030009" -> 32, "030010001" -> 33, "030010002" -> 34, "030010003" -> 35,
    "030020002" -> 36, "030020003" -> 37, "030020005" -> 38, "030020006" -> 39, "030020007" -> 40,
    "030020009" -> 41, "030020010" -> 42, "030020011" -> 43, "030020012" -> 44, "030020013" -> 45,
    "030020014" -> 46, "040010001" -> 47, "040010002" -> 48, "040010003" -> 49, "040010004" -> 50,
    "040010005" -> 51, "040010006" -> 52, "040010007" -> 53, "040010008" -> 54, "040010009" -> 55,
    "040010010" -> 56, "040010011" -> 57, "040010012" -> 58, "040010013" -> 59, "040010014" -> 60,
    "040020001" -> 61, "040020002" -> 62, "040020003" -> 63, "040020004" -> 64, "040020005" -> 65,
    "040020006" -> 66, "040020007" -> 67, "040020008" -> 68, "040020009" -> 69, "040020010" -> 70,
    "040020011" -> 71, "040020012" -> 72, "040020013" -> 73, "040020014" -> 74, "0400200015" -> 75,
    "040020016" -> 76, "040020017" -> 77, "040030001" -> 78, "040030002" -> 79, "040030003" -> 80,
    "040030004" -> 81, "040030005" -> 82, "040030006" -> 83, "040030007" -> 84, "040030008" -> 85,
    "040030009" -> 86, "040030010" -> 87, "040030011" -> 88, "040040001" -> 89, "040040002" -> 90,
    "040040003" -> 91, "040040004" -> 92, "040040005" -> 93, "040040006" -> 94, "040040007" -> 95,
    "040040008" -> 96, "040040009" -> 97, "040040010" -> 98, "050010001" -> 99, "050020001" -> 100,
    "050020002" -> 101, "050020003" -> 102, "050020004" -> 103, "7010010001" -> 104, "7010010002" -> 105,
    "7010030001" -> 106, "7010080001" -> 107, "7010040001" -> 108, "7010050001" -> 109, "7030010001" -> 110,
    "7040020001" -> 111, "7040040001" -> 112, "7040040002" -> 113, "7040040003" -> 114, "7040040004" -> 115,
    "7040040005" -> 116, "7040040006" -> 117, "7040040007" -> 118, "7040040008" -> 119, "7040040009" -> 120,
    "7040040010" -> 121, "7020030001" -> 122, "7020030002" -> 123, "7020030003" -> 124, "7020030004" -> 125,
    "7020030005" -> 126, "7020030006" -> 127, "7050030001" -> 128, "7050030002" -> 129, "7050010001" -> 130,
    "7050020001" -> 131, "7050020002" -> 132, "7050020003" -> 133, "7050020004" -> 134, "7050020005" -> 135,
    "7050020006" -> 136
  )

  //136‰Ωç
  private val tags_raw = "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"

//  private var tags: StringBuffer

  private val tags = new StringBuffer(tags_raw)

  /**
    *
    * @param i
    * @param value
    * @return
    */
  def set(i: Int): Unit = {
    tags.setCharAt(i, '1')
  }

  /**
    *
    * @param i
    * @return
    */
  def get(i: Int): Char = {
    tags.toString.charAt(i)
  }

  /**
    *
    * @return
    */
  def getTagsString(): String = {
    tags.toString
  }

  /**
    *
    * @return
    */
  def getMapper(): Map[String, Int] = {
    tag_mapper
  }
}

object Demo{
  def main(args: Array[String]): Unit = {
    val tagsBuilder = new TagsBuilder
    println(tagsBuilder.getTagsString())
    tagsBuilder.set(1)
    println(tagsBuilder.getTagsString())

    println(tagsBuilder.get(1))
  }
}